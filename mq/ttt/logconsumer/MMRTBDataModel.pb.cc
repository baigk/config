// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMRTBDataModel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MMRTBDataModel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maxmob {
namespace rtb {

namespace {

const ::google::protobuf::Descriptor* RTBDetail_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTBDetail_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wn_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wn_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pv_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pv_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clk_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clk_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MMRTBDataModel_2eproto() {
  protobuf_AddDesc_MMRTBDataModel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MMRTBDataModel.proto");
  GOOGLE_CHECK(file != NULL);
  RTBDetail_t_descriptor_ = file->message_type(0);
  static const int RTBDetail_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTBDetail_t, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTBDetail_t, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTBDetail_t, ip_),
  };
  RTBDetail_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTBDetail_t_descriptor_,
      RTBDetail_t::default_instance_,
      RTBDetail_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTBDetail_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTBDetail_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTBDetail_t));
  Wn_t_descriptor_ = file->message_type(1);
  static const int Wn_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wn_t, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wn_t, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wn_t, req_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wn_t, args_),
  };
  Wn_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wn_t_descriptor_,
      Wn_t::default_instance_,
      Wn_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wn_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wn_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wn_t));
  Pv_t_descriptor_ = file->message_type(2);
  static const int Pv_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pv_t, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pv_t, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pv_t, req_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pv_t, args_),
  };
  Pv_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pv_t_descriptor_,
      Pv_t::default_instance_,
      Pv_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pv_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pv_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pv_t));
  Clk_t_descriptor_ = file->message_type(3);
  static const int Clk_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clk_t, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clk_t, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clk_t, req_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clk_t, args_),
  };
  Clk_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clk_t_descriptor_,
      Clk_t::default_instance_,
      Clk_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clk_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clk_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clk_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MMRTBDataModel_2eproto);
}

void protobuf_RegisterTypes(const ::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTBDetail_t_descriptor_, &RTBDetail_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wn_t_descriptor_, &Wn_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pv_t_descriptor_, &Pv_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clk_t_descriptor_, &Clk_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MMRTBDataModel_2eproto() {
  delete RTBDetail_t::default_instance_;
  delete RTBDetail_t_reflection_;
  delete Wn_t::default_instance_;
  delete Wn_t_reflection_;
  delete Pv_t::default_instance_;
  delete Pv_t_reflection_;
  delete Clk_t::default_instance_;
  delete Clk_t_reflection_;
}

void protobuf_AddDesc_MMRTBDataModel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MMRTBDataModel.proto\022\nmaxmob.rtb\"4\n\013RT"
    "BDetail_t\022\013\n\003pid\030\001 \001(\003\022\014\n\004time\030\002 \001(\003\022\n\n\002"
    "ip\030\003 \001(\t\"B\n\004Wn_t\022\014\n\004time\030\001 \001(\003\022\n\n\002ip\030\002 \001"
    "(\t\022\022\n\nreq_header\030\003 \001(\t\022\014\n\004args\030\004 \001(\t\"B\n\004"
    "Pv_t\022\014\n\004time\030\001 \001(\003\022\n\n\002ip\030\002 \001(\t\022\022\n\nreq_he"
    "ader\030\003 \001(\t\022\014\n\004args\030\004 \001(\t\"C\n\005Clk_t\022\014\n\004tim"
    "e\030\001 \001(\003\022\n\n\002ip\030\002 \001(\t\022\022\n\nreq_header\030\003 \001(\t\022"
    "\014\n\004args\030\004 \001(\t", 293);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MMRTBDataModel.proto", &protobuf_RegisterTypes);
  RTBDetail_t::default_instance_ = new RTBDetail_t();
  Wn_t::default_instance_ = new Wn_t();
  Pv_t::default_instance_ = new Pv_t();
  Clk_t::default_instance_ = new Clk_t();
  RTBDetail_t::default_instance_->InitAsDefaultInstance();
  Wn_t::default_instance_->InitAsDefaultInstance();
  Pv_t::default_instance_->InitAsDefaultInstance();
  Clk_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MMRTBDataModel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MMRTBDataModel_2eproto {
  StaticDescriptorInitializer_MMRTBDataModel_2eproto() {
    protobuf_AddDesc_MMRTBDataModel_2eproto();
  }
} static_descriptor_initializer_MMRTBDataModel_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RTBDetail_t::kPidFieldNumber;
const int RTBDetail_t::kTimeFieldNumber;
const int RTBDetail_t::kIpFieldNumber;
#endif  // !_MSC_VER

RTBDetail_t::RTBDetail_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maxmob.rtb.RTBDetail_t)
}

void RTBDetail_t::InitAsDefaultInstance() {
}

RTBDetail_t::RTBDetail_t(const RTBDetail_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maxmob.rtb.RTBDetail_t)
}

void RTBDetail_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTBDetail_t::~RTBDetail_t() {
  // @@protoc_insertion_point(destructor:maxmob.rtb.RTBDetail_t)
  SharedDtor();
}

void RTBDetail_t::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void RTBDetail_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTBDetail_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTBDetail_t_descriptor_;
}

const RTBDetail_t& RTBDetail_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMRTBDataModel_2eproto();
  return *default_instance_;
}

RTBDetail_t* RTBDetail_t::default_instance_ = NULL;

RTBDetail_t* RTBDetail_t::New() const {
  return new RTBDetail_t;
}

void RTBDetail_t::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RTBDetail_t*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pid_, time_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTBDetail_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maxmob.rtb.RTBDetail_t)
  for (;;) {
    ::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maxmob.rtb.RTBDetail_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maxmob.rtb.RTBDetail_t)
  return false;
#undef DO_
}

void RTBDetail_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maxmob.rtb.RTBDetail_t)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maxmob.rtb.RTBDetail_t)
}

::google::protobuf::uint8* RTBDetail_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maxmob.rtb.RTBDetail_t)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maxmob.rtb.RTBDetail_t)
  return target;
}

int RTBDetail_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTBDetail_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTBDetail_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTBDetail_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTBDetail_t::MergeFrom(const RTBDetail_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTBDetail_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTBDetail_t::CopyFrom(const RTBDetail_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTBDetail_t::IsInitialized() const {

  return true;
}

void RTBDetail_t::Swap(RTBDetail_t* other) {
  if (other != this) {
    swap(pid_, other->pid_);
    swap(time_, other->time_);
    swap(ip_, other->ip_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTBDetail_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTBDetail_t_descriptor_;
  metadata.reflection = RTBDetail_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Wn_t::kTimeFieldNumber;
const int Wn_t::kIpFieldNumber;
const int Wn_t::kReqHeaderFieldNumber;
const int Wn_t::kArgsFieldNumber;
#endif  // !_MSC_VER

Wn_t::Wn_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maxmob.rtb.Wn_t)
}

void Wn_t::InitAsDefaultInstance() {
}

Wn_t::Wn_t(const Wn_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maxmob.rtb.Wn_t)
}

void Wn_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_header_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wn_t::~Wn_t() {
  // @@protoc_insertion_point(destructor:maxmob.rtb.Wn_t)
  SharedDtor();
}

void Wn_t::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_header_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void Wn_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wn_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wn_t_descriptor_;
}

const Wn_t& Wn_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMRTBDataModel_2eproto();
  return *default_instance_;
}

Wn_t* Wn_t::default_instance_ = NULL;

Wn_t* Wn_t::New() const {
  return new Wn_t;
}

void Wn_t::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_req_header()) {
      if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        req_header_->clear();
      }
    }
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wn_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maxmob.rtb.Wn_t)
  for (;;) {
    ::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_req_header;
        break;
      }

      // optional string req_header = 3;
      case 3: {
        if (tag == 26) {
         parse_req_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->req_header().data(), this->req_header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "req_header");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_args;
        break;
      }

      // optional string args = 4;
      case 4: {
        if (tag == 34) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maxmob.rtb.Wn_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maxmob.rtb.Wn_t)
  return false;
#undef DO_
}

void Wn_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maxmob.rtb.Wn_t)
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string req_header = 3;
  if (has_req_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_header().data(), this->req_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->req_header(), output);
  }

  // optional string args = 4;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maxmob.rtb.Wn_t)
}

::google::protobuf::uint8* Wn_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maxmob.rtb.Wn_t)
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string req_header = 3;
  if (has_req_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_header().data(), this->req_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->req_header(), target);
  }

  // optional string args = 4;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maxmob.rtb.Wn_t)
  return target;
}

int Wn_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string req_header = 3;
    if (has_req_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_header());
    }

    // optional string args = 4;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wn_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wn_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wn_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wn_t::MergeFrom(const Wn_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_req_header()) {
      set_req_header(from.req_header());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wn_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wn_t::CopyFrom(const Wn_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wn_t::IsInitialized() const {

  return true;
}

void Wn_t::Swap(Wn_t* other) {
  if (other != this) {
    swap(time_, other->time_);
    swap(ip_, other->ip_);
    swap(req_header_, other->req_header_);
    swap(args_, other->args_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wn_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wn_t_descriptor_;
  metadata.reflection = Wn_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pv_t::kTimeFieldNumber;
const int Pv_t::kIpFieldNumber;
const int Pv_t::kReqHeaderFieldNumber;
const int Pv_t::kArgsFieldNumber;
#endif  // !_MSC_VER

Pv_t::Pv_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maxmob.rtb.Pv_t)
}

void Pv_t::InitAsDefaultInstance() {
}

Pv_t::Pv_t(const Pv_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maxmob.rtb.Pv_t)
}

void Pv_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_header_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pv_t::~Pv_t() {
  // @@protoc_insertion_point(destructor:maxmob.rtb.Pv_t)
  SharedDtor();
}

void Pv_t::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_header_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void Pv_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pv_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pv_t_descriptor_;
}

const Pv_t& Pv_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMRTBDataModel_2eproto();
  return *default_instance_;
}

Pv_t* Pv_t::default_instance_ = NULL;

Pv_t* Pv_t::New() const {
  return new Pv_t;
}

void Pv_t::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_req_header()) {
      if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        req_header_->clear();
      }
    }
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pv_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maxmob.rtb.Pv_t)
  for (;;) {
    ::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_req_header;
        break;
      }

      // optional string req_header = 3;
      case 3: {
        if (tag == 26) {
         parse_req_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->req_header().data(), this->req_header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "req_header");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_args;
        break;
      }

      // optional string args = 4;
      case 4: {
        if (tag == 34) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maxmob.rtb.Pv_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maxmob.rtb.Pv_t)
  return false;
#undef DO_
}

void Pv_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maxmob.rtb.Pv_t)
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string req_header = 3;
  if (has_req_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_header().data(), this->req_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->req_header(), output);
  }

  // optional string args = 4;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maxmob.rtb.Pv_t)
}

::google::protobuf::uint8* Pv_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maxmob.rtb.Pv_t)
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string req_header = 3;
  if (has_req_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_header().data(), this->req_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->req_header(), target);
  }

  // optional string args = 4;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maxmob.rtb.Pv_t)
  return target;
}

int Pv_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string req_header = 3;
    if (has_req_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_header());
    }

    // optional string args = 4;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pv_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pv_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pv_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pv_t::MergeFrom(const Pv_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_req_header()) {
      set_req_header(from.req_header());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pv_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pv_t::CopyFrom(const Pv_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pv_t::IsInitialized() const {

  return true;
}

void Pv_t::Swap(Pv_t* other) {
  if (other != this) {
    swap(time_, other->time_);
    swap(ip_, other->ip_);
    swap(req_header_, other->req_header_);
    swap(args_, other->args_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pv_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pv_t_descriptor_;
  metadata.reflection = Pv_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clk_t::kTimeFieldNumber;
const int Clk_t::kIpFieldNumber;
const int Clk_t::kReqHeaderFieldNumber;
const int Clk_t::kArgsFieldNumber;
#endif  // !_MSC_VER

Clk_t::Clk_t()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:maxmob.rtb.Clk_t)
}

void Clk_t::InitAsDefaultInstance() {
}

Clk_t::Clk_t(const Clk_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:maxmob.rtb.Clk_t)
}

void Clk_t::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  req_header_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_ = const_cast< ::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clk_t::~Clk_t() {
  // @@protoc_insertion_point(destructor:maxmob.rtb.Clk_t)
  SharedDtor();
}

void Clk_t::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_header_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void Clk_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clk_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clk_t_descriptor_;
}

const Clk_t& Clk_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMRTBDataModel_2eproto();
  return *default_instance_;
}

Clk_t* Clk_t::default_instance_ = NULL;

Clk_t* Clk_t::New() const {
  return new Clk_t;
}

void Clk_t::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_req_header()) {
      if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        req_header_->clear();
      }
    }
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clk_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:maxmob.rtb.Clk_t)
  for (;;) {
    ::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_req_header;
        break;
      }

      // optional string req_header = 3;
      case 3: {
        if (tag == 26) {
         parse_req_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->req_header().data(), this->req_header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "req_header");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_args;
        break;
      }

      // optional string args = 4;
      case 4: {
        if (tag == 34) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:maxmob.rtb.Clk_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:maxmob.rtb.Clk_t)
  return false;
#undef DO_
}

void Clk_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:maxmob.rtb.Clk_t)
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string req_header = 3;
  if (has_req_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_header().data(), this->req_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->req_header(), output);
  }

  // optional string args = 4;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:maxmob.rtb.Clk_t)
}

::google::protobuf::uint8* Clk_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:maxmob.rtb.Clk_t)
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string req_header = 3;
  if (has_req_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->req_header().data(), this->req_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "req_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->req_header(), target);
  }

  // optional string args = 4;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maxmob.rtb.Clk_t)
  return target;
}

int Clk_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string req_header = 3;
    if (has_req_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_header());
    }

    // optional string args = 4;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clk_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clk_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clk_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clk_t::MergeFrom(const Clk_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_req_header()) {
      set_req_header(from.req_header());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clk_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clk_t::CopyFrom(const Clk_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clk_t::IsInitialized() const {

  return true;
}

void Clk_t::Swap(Clk_t* other) {
  if (other != this) {
    swap(time_, other->time_);
    swap(ip_, other->ip_);
    swap(req_header_, other->req_header_);
    swap(args_, other->args_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clk_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clk_t_descriptor_;
  metadata.reflection = Clk_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace maxmob

// @@protoc_insertion_point(global_scope)
