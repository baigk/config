// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMRTBDataModel.proto

#ifndef PROTOBUF_MMRTBDataModel_2eproto__INCLUDED
#define PROTOBUF_MMRTBDataModel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace maxmob {
namespace rtb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MMRTBDataModel_2eproto();
void protobuf_AssignDesc_MMRTBDataModel_2eproto();
void protobuf_ShutdownFile_MMRTBDataModel_2eproto();

class RTBDetail_t;
class Wn_t;
class Pv_t;
class Clk_t;

// ===================================================================

class RTBDetail_t : public ::google::protobuf::Message {
 public:
  RTBDetail_t();
  virtual ~RTBDetail_t();

  RTBDetail_t(const RTBDetail_t& from);

  inline RTBDetail_t& operator=(const RTBDetail_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RTBDetail_t& default_instance();

  void Swap(RTBDetail_t* other);

  // implements Message ----------------------------------------------

  RTBDetail_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RTBDetail_t& from);
  void MergeFrom(const RTBDetail_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:maxmob.rtb.RTBDetail_t)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int64 time_;
  ::std::string* ip_;
  friend void  protobuf_AddDesc_MMRTBDataModel_2eproto();
  friend void protobuf_AssignDesc_MMRTBDataModel_2eproto();
  friend void protobuf_ShutdownFile_MMRTBDataModel_2eproto();

  void InitAsDefaultInstance();
  static RTBDetail_t* default_instance_;
};
// -------------------------------------------------------------------

class Wn_t : public ::google::protobuf::Message {
 public:
  Wn_t();
  virtual ~Wn_t();

  Wn_t(const Wn_t& from);

  inline Wn_t& operator=(const Wn_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wn_t& default_instance();

  void Swap(Wn_t* other);

  // implements Message ----------------------------------------------

  Wn_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wn_t& from);
  void MergeFrom(const Wn_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string req_header = 3;
  inline bool has_req_header() const;
  inline void clear_req_header();
  static const int kReqHeaderFieldNumber = 3;
  inline const ::std::string& req_header() const;
  inline void set_req_header(const ::std::string& value);
  inline void set_req_header(const char* value);
  inline void set_req_header(const char* value, size_t size);
  inline ::std::string* mutable_req_header();
  inline ::std::string* release_req_header();
  inline void set_allocated_req_header(::std::string* req_header);

  // optional string args = 4;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 4;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const char* value, size_t size);
  inline ::std::string* mutable_args();
  inline ::std::string* release_args();
  inline void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:maxmob.rtb.Wn_t)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_req_header();
  inline void clear_has_req_header();
  inline void set_has_args();
  inline void clear_has_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::std::string* ip_;
  ::std::string* req_header_;
  ::std::string* args_;
  friend void  protobuf_AddDesc_MMRTBDataModel_2eproto();
  friend void protobuf_AssignDesc_MMRTBDataModel_2eproto();
  friend void protobuf_ShutdownFile_MMRTBDataModel_2eproto();

  void InitAsDefaultInstance();
  static Wn_t* default_instance_;
};
// -------------------------------------------------------------------

class Pv_t : public ::google::protobuf::Message {
 public:
  Pv_t();
  virtual ~Pv_t();

  Pv_t(const Pv_t& from);

  inline Pv_t& operator=(const Pv_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pv_t& default_instance();

  void Swap(Pv_t* other);

  // implements Message ----------------------------------------------

  Pv_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pv_t& from);
  void MergeFrom(const Pv_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string req_header = 3;
  inline bool has_req_header() const;
  inline void clear_req_header();
  static const int kReqHeaderFieldNumber = 3;
  inline const ::std::string& req_header() const;
  inline void set_req_header(const ::std::string& value);
  inline void set_req_header(const char* value);
  inline void set_req_header(const char* value, size_t size);
  inline ::std::string* mutable_req_header();
  inline ::std::string* release_req_header();
  inline void set_allocated_req_header(::std::string* req_header);

  // optional string args = 4;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 4;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const char* value, size_t size);
  inline ::std::string* mutable_args();
  inline ::std::string* release_args();
  inline void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:maxmob.rtb.Pv_t)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_req_header();
  inline void clear_has_req_header();
  inline void set_has_args();
  inline void clear_has_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::std::string* ip_;
  ::std::string* req_header_;
  ::std::string* args_;
  friend void  protobuf_AddDesc_MMRTBDataModel_2eproto();
  friend void protobuf_AssignDesc_MMRTBDataModel_2eproto();
  friend void protobuf_ShutdownFile_MMRTBDataModel_2eproto();

  void InitAsDefaultInstance();
  static Pv_t* default_instance_;
};
// -------------------------------------------------------------------

class Clk_t : public ::google::protobuf::Message {
 public:
  Clk_t();
  virtual ~Clk_t();

  Clk_t(const Clk_t& from);

  inline Clk_t& operator=(const Clk_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clk_t& default_instance();

  void Swap(Clk_t* other);

  // implements Message ----------------------------------------------

  Clk_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clk_t& from);
  void MergeFrom(const Clk_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string req_header = 3;
  inline bool has_req_header() const;
  inline void clear_req_header();
  static const int kReqHeaderFieldNumber = 3;
  inline const ::std::string& req_header() const;
  inline void set_req_header(const ::std::string& value);
  inline void set_req_header(const char* value);
  inline void set_req_header(const char* value, size_t size);
  inline ::std::string* mutable_req_header();
  inline ::std::string* release_req_header();
  inline void set_allocated_req_header(::std::string* req_header);

  // optional string args = 4;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 4;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const char* value, size_t size);
  inline ::std::string* mutable_args();
  inline ::std::string* release_args();
  inline void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:maxmob.rtb.Clk_t)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_req_header();
  inline void clear_has_req_header();
  inline void set_has_args();
  inline void clear_has_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::std::string* ip_;
  ::std::string* req_header_;
  ::std::string* args_;
  friend void  protobuf_AddDesc_MMRTBDataModel_2eproto();
  friend void protobuf_AssignDesc_MMRTBDataModel_2eproto();
  friend void protobuf_ShutdownFile_MMRTBDataModel_2eproto();

  void InitAsDefaultInstance();
  static Clk_t* default_instance_;
};
// ===================================================================


// ===================================================================

// RTBDetail_t

// optional int64 pid = 1;
inline bool RTBDetail_t::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RTBDetail_t::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RTBDetail_t::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RTBDetail_t::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 RTBDetail_t::pid() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.RTBDetail_t.pid)
  return pid_;
}
inline void RTBDetail_t::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:maxmob.rtb.RTBDetail_t.pid)
}

// optional int64 time = 2;
inline bool RTBDetail_t::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RTBDetail_t::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RTBDetail_t::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RTBDetail_t::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 RTBDetail_t::time() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.RTBDetail_t.time)
  return time_;
}
inline void RTBDetail_t::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:maxmob.rtb.RTBDetail_t.time)
}

// optional string ip = 3;
inline bool RTBDetail_t::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RTBDetail_t::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RTBDetail_t::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RTBDetail_t::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& RTBDetail_t::ip() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.RTBDetail_t.ip)
  return *ip_;
}
inline void RTBDetail_t::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.RTBDetail_t.ip)
}
inline void RTBDetail_t::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.RTBDetail_t.ip)
}
inline void RTBDetail_t::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.RTBDetail_t.ip)
}
inline ::std::string* RTBDetail_t::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.RTBDetail_t.ip)
  return ip_;
}
inline ::std::string* RTBDetail_t::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RTBDetail_t::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.RTBDetail_t.ip)
}

// -------------------------------------------------------------------

// Wn_t

// optional int64 time = 1;
inline bool Wn_t::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wn_t::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wn_t::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wn_t::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Wn_t::time() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Wn_t.time)
  return time_;
}
inline void Wn_t::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:maxmob.rtb.Wn_t.time)
}

// optional string ip = 2;
inline bool Wn_t::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wn_t::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wn_t::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wn_t::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Wn_t::ip() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Wn_t.ip)
  return *ip_;
}
inline void Wn_t::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Wn_t.ip)
}
inline void Wn_t::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Wn_t.ip)
}
inline void Wn_t::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Wn_t.ip)
}
inline ::std::string* Wn_t::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Wn_t.ip)
  return ip_;
}
inline ::std::string* Wn_t::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wn_t::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Wn_t.ip)
}

// optional string req_header = 3;
inline bool Wn_t::has_req_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wn_t::set_has_req_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wn_t::clear_has_req_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wn_t::clear_req_header() {
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_->clear();
  }
  clear_has_req_header();
}
inline const ::std::string& Wn_t::req_header() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Wn_t.req_header)
  return *req_header_;
}
inline void Wn_t::set_req_header(const ::std::string& value) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Wn_t.req_header)
}
inline void Wn_t::set_req_header(const char* value) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Wn_t.req_header)
}
inline void Wn_t::set_req_header(const char* value, size_t size) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Wn_t.req_header)
}
inline ::std::string* Wn_t::mutable_req_header() {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Wn_t.req_header)
  return req_header_;
}
inline ::std::string* Wn_t::release_req_header() {
  clear_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = req_header_;
    req_header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wn_t::set_allocated_req_header(::std::string* req_header) {
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_header_;
  }
  if (req_header) {
    set_has_req_header();
    req_header_ = req_header;
  } else {
    clear_has_req_header();
    req_header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Wn_t.req_header)
}

// optional string args = 4;
inline bool Wn_t::has_args() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Wn_t::set_has_args() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Wn_t::clear_has_args() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Wn_t::clear_args() {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_->clear();
  }
  clear_has_args();
}
inline const ::std::string& Wn_t::args() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Wn_t.args)
  return *args_;
}
inline void Wn_t::set_args(const ::std::string& value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Wn_t.args)
}
inline void Wn_t::set_args(const char* value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Wn_t.args)
}
inline void Wn_t::set_args(const char* value, size_t size) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Wn_t.args)
}
inline ::std::string* Wn_t::mutable_args() {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Wn_t.args)
  return args_;
}
inline ::std::string* Wn_t::release_args() {
  clear_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = args_;
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wn_t::set_allocated_args(::std::string* args) {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (args) {
    set_has_args();
    args_ = args;
  } else {
    clear_has_args();
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Wn_t.args)
}

// -------------------------------------------------------------------

// Pv_t

// optional int64 time = 1;
inline bool Pv_t::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pv_t::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pv_t::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pv_t::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Pv_t::time() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Pv_t.time)
  return time_;
}
inline void Pv_t::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:maxmob.rtb.Pv_t.time)
}

// optional string ip = 2;
inline bool Pv_t::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pv_t::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pv_t::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pv_t::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Pv_t::ip() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Pv_t.ip)
  return *ip_;
}
inline void Pv_t::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Pv_t.ip)
}
inline void Pv_t::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Pv_t.ip)
}
inline void Pv_t::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Pv_t.ip)
}
inline ::std::string* Pv_t::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Pv_t.ip)
  return ip_;
}
inline ::std::string* Pv_t::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pv_t::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Pv_t.ip)
}

// optional string req_header = 3;
inline bool Pv_t::has_req_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pv_t::set_has_req_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pv_t::clear_has_req_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pv_t::clear_req_header() {
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_->clear();
  }
  clear_has_req_header();
}
inline const ::std::string& Pv_t::req_header() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Pv_t.req_header)
  return *req_header_;
}
inline void Pv_t::set_req_header(const ::std::string& value) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Pv_t.req_header)
}
inline void Pv_t::set_req_header(const char* value) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Pv_t.req_header)
}
inline void Pv_t::set_req_header(const char* value, size_t size) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Pv_t.req_header)
}
inline ::std::string* Pv_t::mutable_req_header() {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Pv_t.req_header)
  return req_header_;
}
inline ::std::string* Pv_t::release_req_header() {
  clear_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = req_header_;
    req_header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pv_t::set_allocated_req_header(::std::string* req_header) {
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_header_;
  }
  if (req_header) {
    set_has_req_header();
    req_header_ = req_header;
  } else {
    clear_has_req_header();
    req_header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Pv_t.req_header)
}

// optional string args = 4;
inline bool Pv_t::has_args() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pv_t::set_has_args() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pv_t::clear_has_args() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pv_t::clear_args() {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_->clear();
  }
  clear_has_args();
}
inline const ::std::string& Pv_t::args() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Pv_t.args)
  return *args_;
}
inline void Pv_t::set_args(const ::std::string& value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Pv_t.args)
}
inline void Pv_t::set_args(const char* value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Pv_t.args)
}
inline void Pv_t::set_args(const char* value, size_t size) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Pv_t.args)
}
inline ::std::string* Pv_t::mutable_args() {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Pv_t.args)
  return args_;
}
inline ::std::string* Pv_t::release_args() {
  clear_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = args_;
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pv_t::set_allocated_args(::std::string* args) {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (args) {
    set_has_args();
    args_ = args;
  } else {
    clear_has_args();
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Pv_t.args)
}

// -------------------------------------------------------------------

// Clk_t

// optional int64 time = 1;
inline bool Clk_t::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clk_t::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clk_t::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clk_t::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Clk_t::time() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Clk_t.time)
  return time_;
}
inline void Clk_t::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:maxmob.rtb.Clk_t.time)
}

// optional string ip = 2;
inline bool Clk_t::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clk_t::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clk_t::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clk_t::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Clk_t::ip() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Clk_t.ip)
  return *ip_;
}
inline void Clk_t::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Clk_t.ip)
}
inline void Clk_t::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Clk_t.ip)
}
inline void Clk_t::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Clk_t.ip)
}
inline ::std::string* Clk_t::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Clk_t.ip)
  return ip_;
}
inline ::std::string* Clk_t::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Clk_t::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Clk_t.ip)
}

// optional string req_header = 3;
inline bool Clk_t::has_req_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Clk_t::set_has_req_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Clk_t::clear_has_req_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Clk_t::clear_req_header() {
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_->clear();
  }
  clear_has_req_header();
}
inline const ::std::string& Clk_t::req_header() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Clk_t.req_header)
  return *req_header_;
}
inline void Clk_t::set_req_header(const ::std::string& value) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Clk_t.req_header)
}
inline void Clk_t::set_req_header(const char* value) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Clk_t.req_header)
}
inline void Clk_t::set_req_header(const char* value, size_t size) {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  req_header_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Clk_t.req_header)
}
inline ::std::string* Clk_t::mutable_req_header() {
  set_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    req_header_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Clk_t.req_header)
  return req_header_;
}
inline ::std::string* Clk_t::release_req_header() {
  clear_has_req_header();
  if (req_header_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = req_header_;
    req_header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Clk_t::set_allocated_req_header(::std::string* req_header) {
  if (req_header_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete req_header_;
  }
  if (req_header) {
    set_has_req_header();
    req_header_ = req_header;
  } else {
    clear_has_req_header();
    req_header_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Clk_t.req_header)
}

// optional string args = 4;
inline bool Clk_t::has_args() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Clk_t::set_has_args() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Clk_t::clear_has_args() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Clk_t::clear_args() {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_->clear();
  }
  clear_has_args();
}
inline const ::std::string& Clk_t::args() const {
  // @@protoc_insertion_point(field_get:maxmob.rtb.Clk_t.args)
  return *args_;
}
inline void Clk_t::set_args(const ::std::string& value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set:maxmob.rtb.Clk_t.args)
}
inline void Clk_t::set_args(const char* value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set_char:maxmob.rtb.Clk_t.args)
}
inline void Clk_t::set_args(const char* value, size_t size) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:maxmob.rtb.Clk_t.args)
}
inline ::std::string* Clk_t::mutable_args() {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:maxmob.rtb.Clk_t.args)
  return args_;
}
inline ::std::string* Clk_t::release_args() {
  clear_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = args_;
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Clk_t::set_allocated_args(::std::string* args) {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (args) {
    set_has_args();
    args_ = args;
  } else {
    clear_has_args();
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:maxmob.rtb.Clk_t.args)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace maxmob

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MMRTBDataModel_2eproto__INCLUDED
